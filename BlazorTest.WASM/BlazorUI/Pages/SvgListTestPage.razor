@namespace BlazorUI
@page "/SvgListTestPage"

<PageTitle>SVG List Test</PageTitle>

<h1>SVG List Test Page</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h3>Multiple SVG Viewers Test</h3>
            <p>Testing multiple concurrent SvgViewer instances with different configurations.</p>
            <div class="alert alert-success">
                âœ… Now supports multiple simultaneous SVG viewers!
            </div>
        </div>
    </div>
    
    <div class="row">
        @foreach (var config in svgConfigs)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">
                        <h5>@config.Title</h5>
                    </div>
                    <div class="card-body" style="max-width: @(config.MaxWidth)px;">
                        <SvgViewer @ref="@config.ViewerRef"
                                   SvgUrl="@config.SvgUrl"
                                   InitialPaths="@config.InitialPaths"
                                   PathsChanged="(paths) => OnPathsChanged(config.Id, paths)" />
                    </div>
                    <div class="card-footer">
                        <small>Max Width: @config.MaxWidth px</small>
                        <br />
                        <small>Selected: @string.Join(", ", config.SelectedPaths)</small>
                        <br />
                        <button class="btn btn-sm btn-primary mt-2" @onclick="() => TestSelection(config.Id)">
                            Test Select
                        </button>
                        <button class="btn btn-sm btn-secondary mt-2" @onclick="() => ClearSelection(config.Id)">
                            Clear
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<SvgConfig> svgConfigs = new();

    private class SvgConfig
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string SvgUrl { get; set; } = "";
        public int MaxWidth { get; set; } = 300;
        public List<string> InitialPaths { get; set; } = new();
        public List<string> SelectedPaths { get; set; } = new();
        public SvgViewer? ViewerRef { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Initialize with different SVG configurations
        svgConfigs = new List<SvgConfig>
        {
            new SvgConfig
            {
                Id = 1,
                Title = "Small (250px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 250,
                InitialPaths = new List<string> { "Ballroom_1" }
            },
            new SvgConfig
            {
                Id = 2,
                Title = "Medium (350px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 350,
                InitialPaths = new List<string> { "Ballroom_2" }
            },
            new SvgConfig
            {
                Id = 3,
                Title = "Large (450px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 450,
                InitialPaths = new List<string> { }
            }
        };
    }

    private void OnPathsChanged(int configId, List<string> paths)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config != null)
        {
            config.SelectedPaths = paths;
            StateHasChanged();
        }
    }

    private async Task TestSelection(int configId)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config?.ViewerRef != null)
        {
            // Select a different path for testing
            var testPaths = new List<string> { $"Ballroom_{(configId % 3) + 1}" };
            await config.ViewerRef.SelectPaths(testPaths);
        }
    }

    private async Task ClearSelection(int configId)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config?.ViewerRef != null)
        {
            await config.ViewerRef.UnselectAllPaths();
            config.SelectedPaths.Clear();
            StateHasChanged();
        }
    }
}