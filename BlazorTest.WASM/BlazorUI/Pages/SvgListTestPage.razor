@namespace BlazorUI
@page "/SvgListTestPage"

<PageTitle>SVG List Test</PageTitle>

<h1>SVG List Test Page</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h3>Multiple SVG Viewers Test</h3>
            <p>Testing multiple concurrent SvgViewer instances with different configurations.</p>
            <div class="alert alert-success">
                ‚úÖ Now supports multiple simultaneous SVG viewers!
            </div>
        </div>
    </div>
    
    <!-- Button Selection Demo -->
    <div class="row mb-4">
        <div class="col-md-12">
            <h4>SVG Button Selection Demo</h4>
            <p>Click the buttons below to select different SVG configurations. Each SvgViewer is embedded in a button with selection disabled at the SVG level.</p>
            
            <div class="alert alert-info">
                <strong>Selected Option:</strong> @(selectedButtonOption?.Title ?? "None")
                @if (selectedButtonOption != null)
                {
                    <br />
                    <small>@selectedButtonOption.Description</small>
                    @if (selectedButtonOption.HighlightedPaths.Any())
                    {
                        <br />
                        <small><strong>Highlighted Paths:</strong> @string.Join(", ", selectedButtonOption.HighlightedPaths)</small>
                    }
                }
            </div>
            
            <div class="d-flex flex-wrap gap-3">
                @foreach (var option in buttonOptions)
                {
                    var isSelected = selectedButtonOptionId == option.Id;
                    var buttonClass = isSelected ? "btn btn-primary" : "btn btn-outline-primary";
                    var borderStyle = isSelected ? "border: 3px solid #0d6efd; box-shadow: 0 0 10px rgba(13, 110, 253, 0.5);" : "";
                    
                    <button class="@buttonClass" 
                            style="width: 200px; height: 150px; padding: 10px; @borderStyle"
                            @onclick="() => SelectButtonOption(option.Id)">
                        <div class="d-flex flex-column h-100">
                            <div class="flex-grow-1">
                                <SvgViewer SvgUrl="@option.SvgUrl"
                                          InitialPaths="@option.HighlightedPaths"
                                          DisableSelection="true"
                                          Style="width: 100%; height: 100%;" />
                            </div>
                            <div class="mt-2">
                                <small class="text-center @(isSelected ? "text-white" : "")">
                                    @option.Title
                                    @if (isSelected)
                                    {
                                        <br /><span class="badge bg-light text-primary">‚úì Selected</span>
                                    }
                                </small>
                            </div>
                        </div>
                    </button>
                }
            </div>
        </div>
    </div>
    
    <hr />
    
    <!-- Original Grid Demo -->
    <div class="row mb-3">
        <div class="col-md-12">
            <h4>Interactive SVG Grid Demo</h4>
            <p>Multiple independent SvgViewer instances with individual path selection capabilities.</p>
        </div>
    </div>
    
    <div class="row">
        @foreach (var config in svgConfigs)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">
                        <h5>@config.Title</h5>
                    </div>
                    <div class="card-body" style="max-width: @(config.MaxWidth)px;">
                        <SvgViewer @ref="@config.ViewerRef"
                                   SvgUrl="@config.SvgUrl"
                                   InitialPaths="@config.InitialPaths"
                                   DisableSelection="@config.IsDisplayOnly"
                                   PathsChanged="(paths) => OnPathsChanged(config.Id, paths)"
                                   AllInsideSelectedChanged="(value) => OnAllInsideSelectedChanged(config.Id, value)" />
                    </div>
                    <div class="card-footer">
                        <small>Max Width: @config.MaxWidth px</small>
                        <br />
                        @if (config.IsDisplayOnly)
                        {
                            <small class="text-muted">üîí Display Only - Selection Disabled</small>
                            <br />
                            <small>Highlighted: @string.Join(", ", config.InitialPaths)</small>
                        }
                        else
                        {
                            <small>Selected: @string.Join(", ", config.SelectedPaths)</small>
                            <br />
                            <small>All Inside Selected: <strong>@(config.AllInsideSelected ? "‚úÖ" : "‚ùå")</strong></small>
                            <br />
                            <button class="btn btn-sm btn-primary mt-2" @onclick="() => TestSelection(config.Id)">
                                Test Select
                            </button>
                            <button class="btn btn-sm btn-secondary mt-2" @onclick="() => ClearSelection(config.Id)">
                                Clear
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<SvgConfig> svgConfigs = new();
    private List<ButtonOption> buttonOptions = new();
    private int selectedButtonOptionId = 0;
    private ButtonOption? selectedButtonOption => buttonOptions.FirstOrDefault(o => o.Id == selectedButtonOptionId);

    private class SvgConfig
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string SvgUrl { get; set; } = "";
        public int MaxWidth { get; set; } = 300;
        public List<string> InitialPaths { get; set; } = new();
        public List<string> SelectedPaths { get; set; } = new();
        public SvgViewer? ViewerRef { get; set; }
        public bool IsDisplayOnly { get; set; } = false;
        public bool AllInsideSelected { get; set; } = false;
    }

    private class ButtonOption
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string SvgUrl { get; set; } = "";
        public List<string> HighlightedPaths { get; set; } = new();
        public string Description { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Initialize button options for selection demo
        buttonOptions = new List<ButtonOption>
        {
            new ButtonOption
            {
                Id = 1,
                Title = "Single Room",
                SvgUrl = "Level1.svg",
                HighlightedPaths = new List<string> { "Ballroom_1" },
                Description = "Ballroom 1 highlighted"
            },
            new ButtonOption
            {
                Id = 2,
                Title = "Two Rooms",
                SvgUrl = "Level1.svg",
                HighlightedPaths = new List<string> { "Ballroom_1", "Ballroom_2" },
                Description = "Both ballrooms highlighted"
            },
            new ButtonOption
            {
                Id = 3,
                Title = "Alternative Room",
                SvgUrl = "Level1.svg",
                HighlightedPaths = new List<string> { "Ballroom_2" },
                Description = "Ballroom 2 highlighted"
            },
            new ButtonOption
            {
                Id = 4,
                Title = "No Selection",
                SvgUrl = "Level1.svg",
                HighlightedPaths = new List<string>(),
                Description = "No rooms highlighted"
            }
        };
        
        // Initialize with different SVG configurations
        svgConfigs = new List<SvgConfig>
        {
            new SvgConfig
            {
                Id = 1,
                Title = "Small (250px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 250,
                InitialPaths = new List<string> { "Ballroom_1" }
            },
            new SvgConfig
            {
                Id = 2,
                Title = "Medium (350px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 350,
                InitialPaths = new List<string> { "Ballroom_2" }
            },
            new SvgConfig
            {
                Id = 3,
                Title = "Large (450px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 450,
                InitialPaths = new List<string> { }
            },
            new SvgConfig
            {
                Id = 4,
                Title = "Display Only (300px)",
                SvgUrl = "Level1.svg",
                MaxWidth = 300,
                InitialPaths = new List<string> { "Ballroom_1", "Ballroom_2" },
                IsDisplayOnly = true
            }
        };
    }

    private void SelectButtonOption(int optionId)
    {
        selectedButtonOptionId = optionId;
        StateHasChanged();
    }

    private void OnPathsChanged(int configId, List<string> paths)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config != null)
        {
            config.SelectedPaths = paths;
            StateHasChanged();
        }
    }
    
    private void OnAllInsideSelectedChanged(int configId, bool allInsideSelected)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config != null)
        {
            config.AllInsideSelected = allInsideSelected;
            StateHasChanged();
        }
    }

    private async Task TestSelection(int configId)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config?.ViewerRef != null)
        {
            // Select a different path for testing
            var testPaths = new List<string> { $"Ballroom_{(configId % 3) + 1}" };
            await config.ViewerRef.SelectPaths(testPaths);
        }
    }

    private async Task ClearSelection(int configId)
    {
        var config = svgConfigs.FirstOrDefault(c => c.Id == configId);
        if (config?.ViewerRef != null)
        {
            await config.ViewerRef.UnselectAllPaths();
            config.SelectedPaths.Clear();
            StateHasChanged();
        }
    }
}