@namespace BlazorUI
@page "/SVGTestPage"
@using LazyMagic.BlazorSvg

<PageTitle>SVGTest</PageTitle>

<h1>SVGTestPage</h1>

<div class="alert alert-info mb-3">
    <strong>Path Grouping Test:</strong> This page demonstrates SVG path grouping functionality.
    <br />
    <strong>Initial State:</strong> Starting with paths "Ballroom_1" and "Ballroom_3" selected.
    <br />
    <strong>Grouping Features:</strong> Select multiple paths, then click "Group Selected" to create a group with accurate outlines that bridge gaps. Use Ctrl+Click to select entire groups.
</div>

<SvgViewer @ref="@svgViewer"
    InitialPaths="@initialPaths"
    SvgUrl="Level1.svg"
    PathsChanged="OnPathsChanged"
    @bind-AllInsideSelected="@allInsideSelected"/>

<div class="mt-3">
    <div>Initial Paths: <code>@(string.Join(", ", initialPaths))</code></div>
    <div>Currently Selected: <code>@(string.Join(", ", currentPaths.Any() ? currentPaths : initialPaths))</code></div>
    <div>All Inside Selected: <strong>@(allInsideSelected ? "✅ YES - All paths within bounding box are selected" : "❌ NO - Some paths within bounding box are NOT selected")</strong></div>
</div>

@if (allInsideSelected)
{
    <div class="alert alert-success mt-2">
        ✅ All paths inside the bounding box are selected! The selection is complete.
    </div>
}
else if (currentPaths.Count > 1 || initialPaths.Count > 1)
{
    <div class="alert alert-warning mt-2">
        ⚠️ Partial selection detected. There are unselected paths within the bounding box created by your selection.
    </div>
}

<div class="mt-4">
    <h5>Path Grouping Controls:</h5>
    <div class="row">
        <div class="col-md-6">
            <button class="btn btn-success mb-2" @onclick="GroupSelectedPaths">Group Selected Paths</button>
            <button class="btn btn-warning mb-2 ms-2" @onclick="ClearGroups">Clear All Groups</button>
            <br />
            <button class="btn btn-secondary mb-2" @onclick="ShowGroupInfo">Show Group Info</button>
            <button class="btn btn-info mb-2 ms-2" @onclick="TestSelect">TestSelect (Add Ballroom_2)</button>
        </div>
    </div>
</div>

<div class="mt-3">
    <h5>Group Information:</h5>
    <div style="max-height: 200px; overflow-y: auto;">
        @if (groupInfo != null && groupInfo.Any())
        {
            @foreach (var group in groupInfo)
            {
                <div class="alert alert-secondary">
                    <strong>@group.Key</strong>
                    <span class="badge" style="background-color: @group.Value.Color; color: white;">@group.Value.Color</span>
                    <br />
                    Paths: @string.Join(", ", group.Value.PathIds)
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => SelectGroup(group.Key)">Select Group</button>
                </div>
            }
        }
        else
        {
            <p class="text-muted">No groups created yet. Select multiple paths and click "Group Selected Paths" to create groups.</p>
        }
    </div>
</div>

<div class="mt-4">
    <h5>Test Instructions:</h5>
    <ul>
        <li><strong>Group Selected:</strong> Select multiple paths in the SVG, then click "Group Selected Paths" to create a group with an accurate outline</li>
        <li><strong>Group Selection:</strong> Use Ctrl+Click on SVG paths to select/unselect entire groups</li>
        <li><strong>Visual Indicators:</strong> Groups are shown with colored outlines and stroke colors</li>
        <li><strong>Group Controls:</strong> Use the buttons above to manage groups and see group information</li>
    </ul>
</div>

@code {
    private List<string> currentPaths = new();
    private SvgViewer? svgViewer;
    // Initialize with multiple paths that create a bounding box
    // If there are other paths inside this bounding box that aren't selected,
    // AllInsideSelected should be false initially
    private List<string> initialPaths = new List<string> { "Ballroom_1", "Ballroom_3" };
    private bool allInsideSelected = false;
    private Dictionary<string, GroupData>? groupInfo;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
       await base.OnAfterRenderAsync(firstRender);
    }

    private void OnPathsChanged(List<string> paths)
    {
        currentPaths = paths;
    }

    private async Task TestSelect()
    {
        var paths = new List<string> { "Ballroom_2" };
        await svgViewer!.SelectPaths(paths);
    }

    // Path Grouping Methods
    private async Task GroupSelectedPaths()
    {
        if (svgViewer != null)
        {
            var groupId = await svgViewer.GroupSelectedPaths();
            if (groupId != null)
            {
                await ShowGroupInfo(); // Refresh group info display
            }
            else
            {
                // Handle case where no paths are selected or less than 2 paths
                Console.WriteLine("Need at least 2 selected paths to create a group");
            }
        }
    }

    private async Task ClearGroups()
    {
        if (svgViewer != null)
        {
            await svgViewer.ClearAllGroups();
            groupInfo = null;
            StateHasChanged();
        }
    }

    private async Task ShowGroupInfo()
    {
        if (svgViewer != null)
        {
            groupInfo = await svgViewer.GetAllGroups();
            StateHasChanged();
        }
    }

    private async Task SelectGroup(string groupId)
    {
        if (svgViewer != null)
        {
            await svgViewer.SelectGroup(groupId);
        }
    }
}