
@namespace BlazorizeTest.WASM
@inject IJSRuntime JSRuntime
@inject ILzHost Host
@inject IStaticAssets staticAssets
@inject HttpClient HttpClient
@inject ILzClientConfig ClientConfig
@inject IOSAccess OSAccess
@inject IConnectivityService ConnectivityService
@inject ILzMessages Messages
@inject ILoggerFactory LoggerFactory

<MediaQueryList>
    <WindowResize @ref="@windowResize" HeaderHeight="@headerHeight" MaxWidth="@maxWidth">
            <Blazorise.ThemeProvider Theme="@theme">
                <Router AppAssembly="@typeof(Main).Assembly">
                    <Found Context="routeData">
                        @if (ClientConfig.Configured)
                        {
                             <WindowFade FadeDuration="200">
                                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                            </WindowFade>
                        }
                        else
                        {
                            <div style="width: 9rem; height: 9rem; margin-left: 1rem; margin-top: 1rem;">
                                <LzAppLoading AnimationDurationSeconds="1.0"
                                              LoadingMessage="Loading your venue." />
                            </div>
                        }
                    </Found>
                    <NotFound>
                        <PageTitle>Not found</PageTitle>
                        <LayoutView Layout="@typeof(MainLayout)">
                            <p role="alert">Sorry, there's nothing at this address.</p>
                        </LayoutView>
                    </NotFound>
                </Router>
            </Blazorise.ThemeProvider>
    </WindowResize>
</MediaQueryList>

@code {
    private int headerHeight = 32;
    private int maxWidth = 1000;
    WindowResize? windowResize;

    protected override async Task OnInitializedAsync()
    {
        if (!ClientConfig.Configured)
        {
            try
            {

                // We initialize the following because the DI container doens't have access
                // to the JSRuntime until the first render in MAUI.
                await ConnectivityService.InitializeAsync(JSRuntime);
                //var staticAssets = new BlazorStaticAssets(LoggerFactory, new HttpClient());
                Messages.SetStaticAssets(staticAssets);

                await ClientConfig.InitializeAsync(Host.RemoteApiUrl);

                // The following extension methods add to the Mesaages.MessageFiles list
                Messages
                    .AddLazyMagicBlazorMessages()
                    .AddLazyMagicBlazoriseComponentsAuthMessages()
                    ;
                Messages.MessageFiles.AddRange([Host.AssetsUrl + "subtenancy/en-US/SetsApp/Messages.json"]);

                // Read message files for the current culture and configure for current units
                await Messages.SetMessageSetAsync("en-US", LzMessageUnits.Imperial);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        await base.OnInitializedAsync();
    }



    private Theme theme = new()
        {
            BarOptions = new()
            {
                HorizontalHeight = "72px"
            },
            ColorOptions = new()
            {
                Primary = "#0288D1",
                Secondary = "#A65529",
                Success = "#23C02E",
                Info = "#9BD8FE",
                Warning = "#F8B86C",
                Danger = "#F95741",
                Light = "#F0F0F0",
                Dark = "#535353",
            },
            BackgroundOptions = new()
            {
                Primary = "#0288D1",
                Secondary = "#A65529",
                Success = "#23C02E",
                Info = "#9BD8FE",
                Warning = "#F8B86C",
                Danger = "#F95741",
                Light = "#F0F0F0",
                Dark = "#535353",
            },
            InputOptions = new()
            {
                CheckColor = "#0288D1",
            }
        };
}