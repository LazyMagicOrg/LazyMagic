@inject IJSRuntime JSRuntime

<div id="svg" class="svgviewer" @Style></div>
@code {
    [Parameter] public string? SvgUrl { get; set; }
    [Parameter] public EventCallback<string> PathSelected { get; set; }
    [Parameter] public EventCallback<string> PathUnselected { get; set; }
    [Parameter] public EventCallback<List<string>> PathsChanged { get; set; }
    [Parameter] public List<string> InitialPaths { get; set; } = new() { "" };  
    [Parameter] public string Style { get; set; } = "width: 100%; height: 100%;";

    private string style = "";
    private SvgViewerJS? svgViewerJS;
    private ElementReference svg;
    private string? lastSvgUrl;
    private bool busy;
    private string paths = string.Empty;
    private int lastChangeCount = 0;    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        svgViewerJS ??= new SvgViewerJS(JSRuntime);
        svgViewerJS.PathSelectedEvent += OnPathSelected;
        svgViewerJS.PathUnselectedEvent += OnPathUnselected;
        svgViewerJS.PathsChangedEvent += OnPathsChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            busy = true;
            await svgViewerJS!.InitAsync();
            busy = false;
        }
        var svgChanged = !SvgUrl!.Equals(lastSvgUrl);
        if (!busy && ( svgChanged ))
        {
            busy = true;
            lastSvgUrl = SvgUrl;
            await svgViewerJS!.LoadSvgAsync(SvgUrl!);
            busy = false;
        }
        if(firstRender)
        {
            busy = true;
            await svgViewerJS!.SelectPaths(InitialPaths);
            busy = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        style = "style = " + Style;
        await base.OnParametersSetAsync();
        if (svgViewerJS is null)
            throw new InvalidOperationException("svgViewerJS is null");
        if (SvgUrl is null)
            throw new InvalidOperationException("SvgUrl is null");
    }   

    public void OnPathSelected(string pathId)
    {
        return;
        if (!InitialPaths.Contains(pathId))
        {
            InitialPaths.Add(pathId);
        }
        PathSelected.InvokeAsync(pathId);
    }
    public void OnPathUnselected(string pathId)
    {
        return;
        InitialPaths.Remove(pathId);
        PathUnselected.InvokeAsync(pathId);
    }
    public void OnPathsChanged(List<string> paths)
    {
        PathsChanged.InvokeAsync(paths);
    }
    public async Task SelectPath(string pathId) => await svgViewerJS!.SelectPath(pathId);
    public async Task UnslectPath(string pathId) =>await svgViewerJS!.UnselectPath(pathId);
    public async Task UnselectAllPaths() => await svgViewerJS!.UnselectAllPaths();
    public async Task SelectPaths(List<string> paths) {
        await svgViewerJS!.UnselectAllPaths();
        await svgViewerJS!.SelectPaths(paths);
        await InvokeAsync(StateHasChanged);
    }
    // todo - dispose
}
