@namespace LazyMagic.Blazor
@inject IJSRuntime JS
@implements IDisposable
@implements IAsyncDisposable

<div class="fade-in @(isLoaded ? "loaded" : "")" id="@containerId" style="--fade-duration: @(FadeDuration)ms;">
    @ChildContent
</div>

<style>
    .fade-in {
        opacity: 0;
        transition: opacity var(--fade-duration) ease-in;
    }

    .fade-in.loaded {
        opacity: 1;
    }
    
    /* Hide content during resize to prevent flash of resized content */
    .fade-in.resizing {
        opacity: 0 !important;
        transition: none !important;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public int FadeDuration { get; set; } = 250; // milliseconds

    private bool isLoaded = false;
    private string containerId = $"fade-{Guid.NewGuid():N}";
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<WindowFade>? dotNetRef;
    private bool isDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        
        // Create a more manageable JavaScript module approach
        jsModule = await JS.InvokeAsync<IJSObjectReference>("eval", $@"
            (() => {{
                const containerId = '{containerId}';
                const fadeDuration = {FadeDuration};
                let lastSize = {{ width: window.innerWidth, height: window.innerHeight }};
                let resizeTimeout = null;
                let isDisposed = false;
                
                const resizeHandler = () => {{
                    if (isDisposed) return;
                    
                    const currentSize = {{ width: window.innerWidth, height: window.innerHeight }};
                    if (currentSize.width !== lastSize.width || currentSize.height !== lastSize.height) {{
                        const el = document.getElementById(containerId);
                        if (el) {{
                            el.style.opacity = '0';
                            el.style.transition = 'none';
                            el.classList.remove('loaded');
                            el.classList.add('resizing');
                            
                            // Clear any existing timeout
                            if (resizeTimeout) {{
                                clearTimeout(resizeTimeout);
                            }}
                            
                            // Trigger fade-in after delay
                            resizeTimeout = setTimeout(() => {{
                                if (isDisposed) return;
                                const el = document.getElementById(containerId);
                                if (el && el.classList.contains('resizing')) {{
                                    el.style.transition = 'opacity ' + fadeDuration + 'ms ease-in';
                                    el.style.opacity = '1';
                                    el.classList.add('loaded');
                                    el.classList.remove('resizing');
                                }}
                                resizeTimeout = null;
                            }}, fadeDuration);
                        }}
                        lastSize = currentSize;
                    }}
                }};
                
                window.addEventListener('resize', resizeHandler, true);
                
                return {{
                    dispose: () => {{
                        isDisposed = true;
                        window.removeEventListener('resize', resizeHandler, true);
                        if (resizeTimeout) {{
                            clearTimeout(resizeTimeout);
                            resizeTimeout = null;
                        }}
                    }}
                }};
            }})()
        ");
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isDisposed)
        {
            await Task.Delay(50); // Initial delay before showing content
            isLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (!isDisposed)
        {
            isDisposed = true;
            
            if (jsModule != null)
            {
                try
                {
                    await jsModule.InvokeVoidAsync("dispose");
                    await jsModule.DisposeAsync();
                }
                catch (JSDisconnectedException)
                {
                    // JS runtime is already disconnected, ignore
                }
            }
            
            dotNetRef?.Dispose();
        }
    }

    public void Dispose()
    {
        _ = DisposeAsync();
    }
}