@namespace LazyMagic.Blazor
@inject IJSRuntime JS
@implements IDisposable

<div class="fade-in @(isLoaded ? "loaded" : "")" id="@containerId" style="--fade-duration: @(FadeDuration)ms;">
    @ChildContent
</div>

<style>
    .fade-in {
        opacity: 0;
        transition: opacity var(--fade-duration) ease-in;
    }

    .fade-in.loaded {
        opacity: 1;
    }
    
    /* Hide content during resize to prevent flash of resized content */
    .fade-in.resizing {
        opacity: 0 !important;
        transition: none !important;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public int FadeDuration { get; set; } = 250; // milliseconds

    private bool isLoaded = false;
    private string containerId = $"fade-{Guid.NewGuid():N}";

    protected override async Task OnInitializedAsync()
    {
        // Set up immediate resize hiding before Blazor processes the resize
        await JS.InvokeVoidAsync("eval", $@"
            let lastSize = {{ width: window.innerWidth, height: window.innerHeight }};
            window.addEventListener('resize', () => {{
                const currentSize = {{ width: window.innerWidth, height: window.innerHeight }};
                if (currentSize.width !== lastSize.width || currentSize.height !== lastSize.height) {{
                    const el = document.getElementById('{containerId}');
                    if (el) {{
                        el.style.opacity = '0';
                        el.style.transition = 'none';
                        el.classList.remove('loaded');
                        el.classList.add('resizing');
                        
                        // Trigger fade-in after delay
                        setTimeout(() => {{
                            const el = document.getElementById('{containerId}');
                            if (el && el.classList.contains('resizing')) {{
                                el.style.transition = 'opacity {FadeDuration}ms ease-in';
                                el.style.opacity = '1';
                                el.classList.add('loaded');
                                el.classList.remove('resizing');
                            }}
                        }}, {FadeDuration});
                    }}
                    lastSize = currentSize;
                }} else {{
                    // console.log('WindowFade: Browser resize event but size unchanged');
                }}
            }}, true); // Use capture phase to run before other handlers
        ");
        
        await base.OnInitializedAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(50); // Initial delay before showing content
            isLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        // No cleanup needed since we don't directly subscribe to events
    }
}