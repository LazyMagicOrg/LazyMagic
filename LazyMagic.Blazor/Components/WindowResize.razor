@namespace LazyMagic.Blazor
@inject IResizeListener ResizeListener
@inject IJSRuntime JS
@implements IDisposable

<div class="fade-in @(isLoaded ? "loaded" : "")" id="@containerId" style="--fade-duration: @(FadeDuration)ms;">
    <CascadingValue Value="@WindowSize" Name="WindowSize">
        @ChildContent
    </CascadingValue>
</div>

<style>
    .fade-in {
        opacity: 0;
        transition: opacity var(--fade-duration, 1000ms) ease-in;
    }

    .fade-in.loaded {
        opacity: 1;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public WindowSize WindowSize { get; set; } = new();
    [Parameter] public int HeaderHeight { get; set; } = 0;
    [Parameter] public int MaxWidth { get; set; } = 0;
    [Parameter] public int FadeDuration { get; set; } = 250; // milliseconds

    private bool isLoaded = false;
    private string containerId = $"container-{Guid.NewGuid():N}";
    private bool isResizing = false;

    protected override void OnParametersSet()
    {
        WindowSize.HeaderHeight = HeaderHeight;
        base.OnParametersSet();
    }

    protected override async Task OnInitializedAsync()
    {
        // Install resize interceptor BEFORE subscribing to ResizeListener
        await JS.InvokeVoidAsync("eval", $@"
            window.blazorResizeInterceptor = window.blazorResizeInterceptor || {{}};
            window.blazorResizeInterceptor['{containerId}'] = () => {{
                const container = document.getElementById('{containerId}');
                if (container) {{
                    container.style.opacity = '0';
                    container.style.transition = 'none';
                }}
            }};

            // Hook into resize event at capture phase (runs before bubbling)
            window.addEventListener('resize', () => {{
                if (window.blazorResizeInterceptor['{containerId}']) {{
                    window.blazorResizeInterceptor['{containerId}']();
                }}
            }}, true);
        ");

        var window = await ResizeListener.GetBrowserWindowSize();
        WindowSize = new()
        {
            Width = (MaxWidth > 0) ? Math.Min(window.Width, MaxWidth) : window.Width,
            Height = window.Height,
            MaxWidth = MaxWidth,
            HeaderHeight = HeaderHeight
        };

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnResized += WindowResized;
            await Task.Delay(50);
            isLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        else if (isResizing)
        {
            isResizing = false;
            // Re-enable transitions and fade in with configured duration
            await JS.InvokeVoidAsync("eval", $@"
                const container = document.getElementById('{containerId}');
                if (container) {{
                    container.style.transition = '';
                    setTimeout(() => {{
                        container.classList.add('loaded');
                        container.style.opacity = '1';
                    }}, 50);
                }}
            ");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        ResizeListener.OnResized -= WindowResized;
        // Cleanup JS interceptor
        _ = JS.InvokeVoidAsync("eval", $@"
            delete window.blazorResizeInterceptor['{containerId}'];
            window.removeEventListener('resize', window.blazorResizeInterceptor['{containerId}'], true);
        ");
    }

    private async void WindowResized(object? sender, BrowserWindowSize window)
    {
        Console.WriteLine($"Window resized to {window.Width}x{window.Height}");

        var newWidth = (MaxWidth > 0) ? Math.Min(window.Width, MaxWidth) : window.Width;

        if (WindowSize.Width != newWidth || WindowSize.Height != window.Height)
        {
            // JS already hid the content instantly
            isLoaded = false;

            // Update window size
            WindowSize = new()
            {
                Width = newWidth,
                Height = window.Height,
                MaxWidth = MaxWidth,
                HeaderHeight = HeaderHeight
            };

            isResizing = true;
            await InvokeAsync(StateHasChanged);
        }
    }
}